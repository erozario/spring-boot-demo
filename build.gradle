buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE')
        classpath('com.bmuschko:gradle-docker-plugin:3.2.5')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

bootJar {
    baseName = 'spring-boot-demo'
    version = '0.1.0'
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-vault-dependencies:2.0.0.RC1'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.cloud:spring-cloud-starter-vault-config")
    compile("org.springframework.cloud:spring-cloud-vault-config-databases")
    compile("commons-io:commons-io:2.6")
    runtime("org.postgresql:postgresql")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    annotationProcessor("org.projectlombok:lombok")
    implementation("org.projectlombok:lombok")
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createWebDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/web/Dockerfile')
    from 'openjdk:8-jre-alpine'
    maintainer "Eduardo Rozario <eduardo.rozario@rivendel.com.br>"
    runCommand 'apk --update --no-cache add curl'
    copyFile bootJar.archiveName, '/app/spring-boot-demo.jar'
    entryPoint 'java'
    workingDir '/app'
    defaultCommand '-jar', '/app/spring-boot-demo.jar'
    exposePort 8080
    instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/actuator/health || exit 1'
}

task createVaultDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/vault/Dockerfile')
    from 'vault:0.10.1'
    maintainer "Eduardo Rozario <eduardo.rozario@rivendel.com.br>"
    copyFile 'config', '/vault/config'
    runCommand  'chown -R vault:vault /vault/config'
}

task syncArchive(type: Sync) {
    dependsOn assemble
    from bootJar.archivePath
    into createWebDockerfile.destFile.parentFile
}

task syncVaultConfig(type: Sync) {
    from project.file('vault/config')
    into project.file(createVaultDockerfile.destFile.parentFile.path + "/config")
}

createWebDockerfile.dependsOn syncArchive
createVaultDockerfile.dependsOn syncVaultConfig
build.dependsOn createWebDockerfile, createVaultDockerfile
